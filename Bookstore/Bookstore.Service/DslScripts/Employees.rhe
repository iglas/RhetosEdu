Module Employees
{
    Entity Employee
    {
        ShortString Name;
        ShortString VAT;

        FilterBy EmployeeSearch '(repository, parameter) =>
        {   
            var query = repository.Employees.EmployeeDepartment.Query(item => item.Department.Code == parameter.DepartmentCode);
            //navigacijski property Employee->EmployeeDepartment?
            if(parameter.OnlyManagers.HasValue && parameter.OnlyManagers.Value)
            {
                query.Where(item=>item.Employee.Extension_Manager != null);
            }
            
            if(parameter.EducationName != null)
            {
                 return repository.Employees.Education.Query(e => e.Description.Contains(parameter.EducationName) && query.Select(x=>x.EmployeeID).Contains(e.EmployeeID)).Select(x=>x.Employee).ToSimple().ToArray();
            }
            

            return query.Select(item=>item.Employee).ToSimple().ToArray();
        }';
    }

    Parameter EmployeeSearch
    {
        ShortString DepartmentCode;
        Bool OnlyManagers;
        ShortString EducationName;
    }

    Entity Manager
    {
        Extends Employees.Employee;
        ShortString Bonus { DefaultValue 'item=> "10.000€"';}
    }

    Entity Education
    {
        Date EventDate;
        LongString Description;

        Reference Employee;
    }

    Entity Department
    {
        ShortString Code { Unique; }
        LongString Description;
    }

    Entity EmployeeDepartment
    {
        Reference Employee { Detail; }
        Reference Department { Required; } 

        UniqueMultiple 'Employee Department';

        DenyUserEdit;
    }
}